ppois(10/1787, 1/100, lower.tail = FALSE)
binom.test(10, 1787, p=1/100)
binom.test(10, 1787, p=1/100, alternative = "greater")
binom.test(10, 1787, p=1/100, alternative = "less")
treat <- -0.3
treat <- -3
placebo <- 1
t_sd <- 1.5
p_sd <- 1.8
n <- 9
mixprob <- (n-1)/(n+n - 2)
mixprob
s <- sqrt(mixprob * t_sd ^ 2+ (1-mixprob) * p_sd ^ 2)
s
z <- (treat - placebo) / (s * sqrt(1/n + 1/n))
z
pz <- 2 * pnorm(-abs(z))
pz
power.t.test(n=100, delta=.01, sd=.04, alternative="one.sided")
?power.t.test
power.t.test(n=100, delta=.01, sd=.04, alternative="one.sided", type = "paired")
power.t.test(power=.90, delta=.01, sd=.04, alternative="one.sided", type = "paired")
power.t.test(n=100, delta=.01, sd=.04, alternative="one.sided", type = "paired", sig.level=.10)
power.t.test(n=100, delta=.01, sd=.04, alternative="one.sided", type = "paired")
power.t.test(n=100, delta=.01, sd=.04, alternative="one.sided", type = "paired")
?t.test
(44 - 42.04) / (12 * sqrt(1/288) + 1/288)
z <- (44 - 42.04) / (12 * sqrt(1/288) + 1/288)
2 * pnorm(-abs(z))
2 * pnorm(-abs(z), lower.tail=F)
2 * pnorm(z, lower.tail=F)
2 * (1-pnorm(z))
pnorm(z)
z <- (44 - 42.04) / (12 * sqrt((1/288) + 1/288))
2 * (1-pnorm(z))
z * (1-pnorm(z))
mn + c(-1, 1) * qnorm(.95) * s / sqrt(n)
mn <- 1100
s <- 30
n <- 9
mn + c(-1, 1) * qnorm(.95) * s / sqrt(n)
mn <- 1100
s <- 30
n <- 9
mn + c(-1, 1) * qnorm(.975) * s / sqrt(n)
qnorm(.975)
qnorm(.025)
mn + c(-1, 1) * 1.96 * s / sqrt(n)
mn + c(-1, 1) * 1.96 * s / sqrt(n-1)
t.test(mu=1100, sd = 30, n-9)
t.test(mu=1100, sd = 30, n=9)
pnorm(.975)
?qnorm
?tnorm
qt(.975)
qnorm(.975) * 30/3
qnorm(.975) * 30/3 + 1100
1100 - qnorm(.975) * 30/3
1100 - qnorm(.95) * 30/3
mn + c(-1, 1) * qnorm(.95) * s / sqrt(n)
mn + c(-1, 1) * qnorm(.975) * s / sqrt(n)
29/30
mn + c(-1, 1) * qt(.975, df=n-1) * s / sqrt(n)
y<-dnorm(x,mean=5, sd=5/sqrt(40))*500
y <- dnorm(x,mean=5, sd=5/sqrt(40))*500
install_github("RSiteCatalyst", "randyzwitch", ref="master")
library(devtools)
install_github("RSiteCatalyst", "randyzwitch", ref="master")
install.packages("grDevices")
install.packages("grDevices")
install.packages("grDevices")
install.packages("grDevices")
install.packages("grDevices")
install.packages("grDevices")
install.packages("grDevices")
library(grDevices)
colorRamp
pal <- colorRamp(c("red", "blue"))
pal(0)
pal(1)
pal(0.5)
pal <- colorRampPalette(c("red", "yellow"))
pal(2)
pal(10)
install.packages("RColorBrewer")
library(RColorBrewer)
cols <- breer.pal(3, "BuGn")
cols <- brewer.pal(3, "BuGn")
cols
image(volcano, col = pal(20))
volcano
pal <- colorRampPalete(cols)
pal <- colorRampPalette(cols)
image(volcano, col = pal(20))
x <- rnorm(10000)
y <- rnorm(10000)
smoothScatter(x, y)
plot(x, y, pch = 19)
plot(x, y, col = rgb(0, 0, 0, 0.2), pch = 19)
library(UsingR)
library(UsingR); data(galton)
par(mfrow=c(1,2))
hist(galton$child, col="blue", breaks=100)
e
hist(galton$parent, col="blue", breaks=100)
library(manipulate)
plot(galton$parent, galton$child, pch=19, col = "blue")
freqData <- as.data.frame(table(galton$child, galton$parent))
names(freqData) <- c("child", "parent", "freq")
plot(as.numeric(as.vector(freqData$parent)),
as.numeric(as.vector(freqData$child)),
pch = 21, col = "black", bg = "lightblue",
cex = .15 * freqData$freq,
xlab = "parent", ylab = "child")
par(mfrow=c(1,1))
plot(as.numeric(as.vector(freqData$parent)),
as.numeric(as.vector(freqData$child)),
pch = 21, col = "black", bg = "lightblue",
cex = .15 * freqData$freq,
xlab = "parent", ylab = "child")
lm(I(child - mean(child))~ I(parent - mean(parent)) - 1, data = galton)
y <- galton$child
x <- galton$parent
beta1 <- cor(y, x) * sd(y) / sd(x)
beta0 <- mean(y) - beta1 * mean(x)
rbind(c(beta0, beta1), coef(lm(y ~ x)))
library(UsingR)
data(father.son)
y <- (father.son$sheight - mean(father.son$sheight)) / sd(father.son$sheight)
x <- (father.son@fheight - mean(father.son$fheight)) / sd(father.son$fheight)
x <- (father.son$fheight - mean(father.son$fheight)) / sd(father.son$fheight)
rho <- cor(x,y)
myPlot <- function(x, y) {
plot(x, y,
xlab= "Father's height, normalized",
ylab = "Son's height, normalized",
xlim = c(-3, 3), ylim = c(-3, 3),
bg = "lightblue", col = "black", cex = 1.1, pch = 21,
frame = FALSE)
}
myPlot(x, y)
abline(0, 1)
abline(0, rho, lwd = 2)
abline(0, 1/rho, lwd = 2)
abline(h = 0); abline(v = 0) # reference lines for no relationship
x <- c(0.18, -1.54, 0.42, 0.95)
mean(x)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
lm(y ~ x - 1)
data(mtcars)
lm(mpg ~ weight, data = mtcars)
names(mtcars)
lm(mpg ~ wt, data = mtcars)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
lm(y ~ x)
y <- (father.son$sheight - mean(father.son$sheight)) / sd(father.son$sheight)
x <- (father.son$fheight - mean(father.son$fheight)) / sd(father.son$fheight)
rho <- cor(x,y)
myPlot(x, y)
lm(y ~ x)
abline(0, rho, lwd = 2) # father predicts son
beta1 <- cor(y, x) * sd(y) / sd(x)
beta0 <- mean(y) - beta1 * mean(x)
beta0
mean(x)
mean(y)
y
mean(y)
mean(x)
beta1
cor(y, x)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
mean(x)
x <- c(0.18, -1.54, 0.42, 0.95)
w <- c(2, 1, 3, 1)
sum(w * (x-mean(x)^2))
sum(w * (x-mean(x))^2))
sum(w * (x-mean(x))^2)
sum(w * (x-.1417^2)
)
sum(w * (x-.1417)^2)
sum(w * (x-.1.077)^2)
sum(w * (x-1.077)^2)
sum(w * (x-.3)^2)
(w * x) / w
mean((w * x) / w)
sum((w * x) / w)
(w * x) / sum(w)
sum((w * x)) / sum(w)
sum(w * x) / sum(w)
y <- (father.son$sheight - mean(father.son$sheight)) / sd(father.son$sheight)
x <- (father.son$fheight - mean(father.son$fheight)) / sd(father.son$fheight)
lm(y ~ x)$coeff
lm(x ~ y)$coeff
lm(y ~ x)$coeff[1]
lm(y ~ x)$coeff[2] / lm(x ~ y)$coeff[2]
var(y)/var(x)
lm(father.son$sheight ~ father.son$fheight)$coeff[2] / lm(father.son$fheight ~ father.son$sheight)$coeff[2]
var(father.son$sheight) / var(father.son$fheight)
getwd()
setwd("~")
getwd()
setwd("./datasciencecoursera/my files/05-RR/repdata_peerSessment1")
setwd("./datasciencecoursera/my files/05-RR/repdata_peerAssessment1")
data <- read.csv("activity.csv")
head(data)
data[1,2]
str(data)
as.Date(data$date, format = "%yyyy/%mm/%dd")
as.Date(data$date, format = "%Y/%m/%d")
as.Date(data$date, format = "%Y-%m-%d")
data$Date <- as.Date(data$date, format = "%Y-%m-%d")
What is the mean total number of steps taken per day?
library(dplyr)
group_by(data, date)
group_by(data, date) %>%
summarize(Total Steps = sum(steps))
group_by(data, date) %>%
summarize(TotalSteps = sum(steps))
data[data$date == "2012-11-30",]
data <- read.csv("activity.csv")
data$date <- as.Date(data$date, format = "%Y-%m-%d")
group_by(data, date) %>%
summarize(TotalSteps = sum(steps))
group_by(data, date) %>%
summarize(TotalSteps = sum(steps)) %>%
hist(TotalSteps)
group_by(data, date) %>%
summarize(TotalSteps = as.numeric(sum(steps))) %>%
hist(TotalSteps)
group_by(data, date) %>%
summarize(TotalSteps = sum(steps)) %>%
hist(as.numeric(TotalSteps))
hist(data)
hist(data$steps)
group_by(data, date) %>%
summarize(StepsPerDay = as.numeric(sum(steps))) %>%
hist(StepsPerDay)
group_by(data, date) %>%
summarize(StepsPerDay = as.numeric(sum(steps))) %>%
hist(StepsPerDay, na.rm = TRUE)
group_by(data, date) %>%
summarize(StepsPerDay = sum(steps)) %>%
qplot(StepsPerDay)
library(ggplot2)
group_by(data, date) %>%
summarize(StepsPerDay = sum(steps)) %>%
qplot(StepsPerDay)
?qplot
group_by(data, date) %>%
summarize(StepsPerDay = sum(steps)) %>%
qplot(StepsPerDay, geom="hist")
group_by(data, date) %>%
summarize(StepsPerDay = sum(steps)) %>%
qplot(StepsPerDay, geom="histogram")
class(data$steps[1])
class(data$steps[100])
data$steps <- as.numeric(data$steps)
group_by(data, date) %>%
summarize(StepsPerDay = sum(steps)) %>%
qplot(StepsPerDay, geom="histogram")
group_by(data, date) %>%
summarize(StepsPerDay = sum(steps)) #%>%
group_by(data, date) %>%
summarize(StepsPerDay = sum(steps)) #%>%
qplot(x=StepsPerDay, geom="histogram")
group_by(data, date) %>%
summarize(StepsPerDay = sum(steps)) #%>%
qplot(geom="histogram")
group_by(data, date) %>%
summarize(StepsPerDay = sum(steps)) %>%
qplot(geom="histogram")
group_by(data, date) %>%
summarize(StepsPerDay = sum(steps)) %>%
qplot(steps,geom="histogram")
data.daily <- group_by(data, date) %>%
summarize(StepsPerDay = sum(steps))
qplot(data.daily$StepsPerDay,geom="histogram")
qplot(data.daily$StepsPerDay,geom="histogram", bindwidth=10)
qplot(data.daily$StepsPerDay,geom="histogram", bindwidth=1)
qplot(data.daily$StepsPerDay,geom="histogram", bindwidth=.1)
qplot(data.daily$StepsPerDay,geom="histogram", bindwidth=.05)
qplot(data.daily$StepsPerDay,geom="histogram", binwidth=.05)
qplot(data.daily$StepsPerDay,geom="histogram", binwidth=10)
qplot(data.daily$StepsPerDay,geom="histogram", binwidth=100)
qplot(data.daily$StepsPerDay,geom="histogram", binwidth=1000)
qplot(data.daily$StepsPerDay,geom="histogram", binwidth=500)
qplot(data.daily$StepsPerDay,geom="histogram", binwidth=750)
qplot(data.daily$StepsPerDay,geom="histogram")
?log10
qplot(log10(data.daily$StepsPerDay),geom="histogram")
qplot(data.daily$StepsPerDay,geom="histogram", xlab="Total Steps Per Day")
qplot(data.daily$StepsPerDay,geom="histogram", xlab="Total Steps Per Day", binwidth=1500)
qplot(data.daily$StepsPerDay,geom="histogram", xlab="Total Steps Per Day", binwidth=1200)
qplot(data.daily$StepsPerDay,geom="histogram", xlab="Total Steps Per Day")
?qplot
qplot(data.daily$StepsPerDay,geom="histogram", xlab="Total Steps Per Day", color="blue")
mean(data.daily$steps)
mean(data.daily$steps, na.rm=TRUE)
mean(data.daily$StepsPerDay, na.rm=TRUE)
mean(data.daily$StepsPerDay)
median(data.daily$StepsPerDay, na.rm = TRUE)
qplot(x=data$interval, y = data$steps)
qplot(x=data$interval, y = data$steps, geom="line")
data.interval <- group_by(data, interval) %>%
summarize(AvgSteps = mean(steps))
data.interval
data.interval <- group_by(data, interval) %>%
summarize(AvgSteps = mean(steps, na.rm = TRUE))
data.interval
qplot(data.interval$interval, data.interval$steps)
data.interval <- group_by(data, as.factor(interval)) %>%
summarize(AvgSteps = mean(steps, na.rm = TRUE))
qplot(data.interval$interval, data.interval$steps)
qplot(x = data.interval$interval, y = data.interval$steps)
?qplot
qplot(x = data.interval$interval, y = data.interval$AvgSteps)
data.interval
data.interval <- group_by(data, interval) %>%
summarize(AvgSteps = mean(steps, na.rm = TRUE))
qplot(x = data.interval$interval, y = data.interval$AvgSteps)
qplot(x = data.interval$interval, y = data.interval$AvgSteps, geom= "line")
qplot(x = data.interval$interval, y = data.interval$AvgSteps, geom= "line",
xlab = "Interval", ylab= "Average Steps Across All Days")
geom_vline( xintercept = 1000)
qplot(x = data.interval$interval, y = data.interval$AvgSteps, geom= "line",
xlab = "Interval", ylab= "Average Steps Across All Days", geom_vline = data.interval$interval[which.max(data.interval$AvgSteps)])
qplot(x = data.interval$interval, y = data.interval$AvgSteps, geom= "line",
xlab = "Interval", ylab= "Average Steps Across All Days",
geom_vline = data.interval$interval[which.max(data.interval$AvgSteps)])
qplot(x = data.interval$interval, y = data.interval$AvgSteps, geom= "line",
xlab = "Interval", ylab= "Average Steps Across All Days",
vline = data.interval$interval[which.max(data.interval$AvgSteps)])
data.interval$interval[which.max(data.interval$AvgSteps)]
g <- ggplot(data.interval, aes(interval, AvgSteps))
g + geom_line() + geom_vline(data.interval$interval[which.max(data.interval$AvgSteps)])
g + geom_line() + geom_vline(xintercept = data.interval$interval[which.max(data.interval$AvgSteps)])
g + geom_line() + geom_vline(xintercept = data.interval$interval[which.max(data.interval$AvgSteps)],
color = "red", linetype = "longdash")
g + geom_line() + geom_vline(xintercept = data.interval$interval[which.max(data.interval$AvgSteps)],
color = "red", linetype = "longdash") +
xlab("Interval")
g + geom_line() + geom_vline(xintercept = data.interval$interval[which.max(data.interval$AvgSteps)],
color = "red", linetype = "longdash") +
xlab("Interval") + ylab("Average Steps Across All Days")
sum(is.na(data$steps))
The total number of NA values in the dataset is `total.na`.
for (i in 1:length(data)) {
if (is.na(data$steps) == TRUE) {
data$steps = mean(data.steps[interval == data$interval[i]], na.rm = TRUE)
}
}
for (i in 1:length(data)) {
if (is.na(data$steps[i]) == TRUE) {
data$steps = mean(data.steps[interval == data$interval[i]], na.rm = TRUE)
}
}
for (i in 1:length(data)) {
if (is.na(data$steps[i]) == TRUE) {
data$steps = mean(data$steps[interval == data$interval[i]], na.rm = TRUE)
}
}
names(data)
for (i in 1:length(data)) {
if (is.na(data$steps[i]) == TRUE) {
data$steps = mean(data$steps[data$interval == data$interval[i]], na.rm = TRUE)
}
}
data$steps
data <- read.csv("activity.csv")
data$date <- as.Date(data$date, format = "%Y-%m-%d")
for (i in 1:length(data)) {
if (is.na(data$steps[i]) == TRUE) {
data$steps[i] = mean(data$steps[data$interval == data$interval[i]], na.rm = TRUE)
}
}
data$steps
is.na(data$steps[9977])
mean(data$steps[data$interval == data$interval[9977]], na.rm = TRUE)
mean(data$steps[data$interval == data$interval[9977]], na.rm = TRUE)
data$interval[9977]
mean(data$steps[data$interval == data$interval[9977]], na.rm = TRUE)
for (i in 1:length(data)) {
if (is.na(data$steps[i]) == TRUE) {
data$steps[i]  <-  mean(data$steps[data$interval == data$interval[i]], na.rm = TRUE)
}
}
tail(data$steps)
length(data)
data <- read.csv("activity.csv")
data$date <- as.Date(data$date, format = "%Y-%m-%d")
for (i in 1:length(data$steps)) {
if (is.na(data$steps[i]) == TRUE) {
data$steps[i]  <-  mean(data$steps[data$interval == data$interval[i]], na.rm = TRUE)
}
}
tail(data$steps)
data.no.na <- group_by(data, date) %>%
summarize(StepsPerDay = sum(steps))
qplot(data.no.na$StepsPerDay,geom="histogram", xlab="Total Steps Per Day")
sum(is.na(data.no.na$steps))
data.no.na$steps
sum(is.na(data))
mean.no.na <- mean(data.no.na$StepsPerDay)
median.no.na <- median(data.no.na$StepsPerDay)
qplot(data.no.na$StepsPerDay,geom="histogram", xlab="Total Steps Per Day", vline=mean.no.na)
g <- ggplot(data.no.na$StepsPerDay)
g <- ggplot(data.no.na, aes(StepsPerDay))
g + geom_vline(mean.no.na, color = "red") + geom_vline(median.no.na, color = "blue")
g
g + geom_hist
g + geom_hist()
g + geom_bar()
g + geom_bar() + geom_vline(mean.no.na, color = "red") + geom_vline(median.no.na, color = "blue")
g + geom_bar() +
geom_vline(mean.no.na, color = "red") +
geom_vline(median.no.na, color = "blue")
g + geom_bar() +
geom_vline(mean.no.na, color = "red") +
geom_vline(median.no.na, color = "blue")
qplot(data.no.na$StepsPerDay, xlab = "Total Steps per Day")
weekdays(data.no.na$date[4])
is.weekdays(data.no.na$date[4])
is.weekday(data.no.na$date[4])
?mutate
weekday  <- if (weekdays(data.no.na$date) %in% c("Saturday", "Sunday") {
return("Weekend")
else { return("Weekday")}
}
weekday  <- if (weekdays(data.no.na$date) %in% c("Saturday", "Sunday") {
if (weekdays(data.no.na$date) %in% c("Saturday", "Sunday") {
data.no.na$weekday  <- if (weekdays(data.no.na$date) %in% c("Saturday", "Sunday") ){
return("Weekend")
else { return("Weekday")}
data.no.na$weekday  <- if (weekdays(data.no.na$date) %in% c("Saturday", "Sunday") ){
return("Weekend") }
else {return("Weekday")}
if (weekdays(data.no.na$date) %in% c("Saturday", "Sunday") ){
data.no.na$DayOfWeek <- "Weekend" }
if (weekdays(data.no.na$date) %in% c("Saturday", "Sunday") ){
data.no.na$DayOfWeek <- "Weekend"
} else {return("Weekday")}
weekdays(data.no.na$date %in% c("Saturday", "Sunday")
)
weekdays(data.no.na$date) %in% c("Saturday", "Sunday")
data.no.na$date
if (data.no.na[weekdays(data.no.na$date) %in% c("Saturday", "Sunday")) {
data.no.na$DayOfWeek <- "Weekend"
} else { data.no.na$DayOfWeek <- "Weekday"}
if (data.no.na[weekdays(data.no.na$date) %in% c("Saturday", "Sunday")) {
if (weekdays(data.no.na$date) %in% c("Saturday", "Sunday")) {
data.no.na$DayOfWeek <- "Weekend"
} else {data.no.na$DayOfWeek <- "Weekday"}
names(data.no.na)
data.no.na$DayOfWeek
for (i in 1:length(data.no.na$date))
for (i in 1:length(data.no.na$date)) {
if (weekdays(data.no.na$date[i]) %in% c("Saturday", "Sunday")) {
data.no.na$DayOfWeek[i] <- "Weekend"
} else {data.no.na$DayOfWeek[i] <- "Weekday"}
}
data.no.na$DayOfWeek
data <- read.csv("activity.csv")
data$date <- as.Date(data$date, format = "%Y-%m-%d")
for (i in 1:length(data$steps)) {
if (is.na(data$steps[i]) == TRUE) {
data.no.na$steps[i]  <-  mean(data$steps[data$interval == data$interval[i]], na.rm = TRUE)
}
}
data.no.na <- data
for (i in 1:length(data$steps)) {
if (is.na(data$steps[i]) == TRUE) {
data.no.na$steps[i]  <-  mean(data$steps[data$interval == data$interval[i]], na.rm = TRUE)
}
}
head(data)
head(data.no.na)
data.no.na.daily <- group_by(data.no.na, date) %>%
summarize(StepsPerDay = sum(steps))
mean.no.na <- mean(data.no.na.daily$StepsPerDay)
median.no.na <- median(data.no.na.daily$StepsPerDay)
qplot(data.no.na.daily$StepsPerDay, xlab = "Total Steps per Day")
for (i in 1:length(data.no.na$date)) {
if (weekdays(data.no.na$date[i]) %in% c("Saturday", "Sunday")) {
data.no.na$DayOfWeek[i] <- "Weekend"
} else {data.no.na$DayOfWeek[i] <- "Weekday"}
}
data.no.na$DayOfWeek
names(data.no.na)
g2 <- ggplot(data.no.na, aes(steps, interval))
g2 + geom_line() + facet_grid(DayOfWeek ~ .)
data.no.na.interval <- group_by(data.no.na, interval) %>%
summarize(AvgSteps = mean(steps))
g2 <- ggplot(data.no.na, aes(AvgSteps, interval))
g2 + geom_line() + facet_grid(DayOfWeek ~ .)
g2 <- ggplot(data.no.na.interval, aes(AvgSteps, interval))
g2 + geom_line() + facet_grid(DayOfWeek ~ .)
names(data.no.na.interval)
data.no.na.interval <- group_by(data.no.na, interval, DayOfWeek) %>%
summarize(AvgSteps = mean(steps))
g2 <- ggplot(data.no.na.interval, aes(AvgSteps, interval))
g2 + geom_line() + facet_grid(DayOfWeek ~ .)
g2 <- ggplot(data.no.na.interval, aes(interval, AvgSteps))
g2 + geom_line() + facet_grid(DayOfWeek ~ .)
data.no.na.interval <- group_by(data.no.na, interval, DayOfWeek) %>%
summarize(AvgSteps = mean(steps))
g2 <- ggplot(data.no.na.interval, aes(interval, AvgSteps))
g2 + geom_line() + facet_grid(DayOfWeek ~ .) + ylab("Average Number of Steps")
```
getwd()
